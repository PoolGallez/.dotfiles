#
# Simple X HotKey Deamon (SXHKD) configuration settngs
#
# This file contains my keyboard shortcuts and related actions to be made on some events
#

#
# General Syntax for the keybindings
# [Modifier + ]*[@|!]KEYSYM
# 	COMMAND
# Modifier can be super, hyper,meta, alt, control, ctrl,shift,mode_switch,lock,
# mod1,mod2,mod3,mod4,mod5
#
# Using @? => event run on key release instead of key press 
# Using !? => run on motion modification notify events and must have two integer
# 	      contain 2 integer conversion specification which will be replaced
# 	      by x,y coordinates of the pointer relative to the root window
# 	      (only accepts button1, ..., button5)
# KEYSYM => value of the key pressed that you can get from xev
# button1,...,button24 can be used to deifne mouse hotkeys 

# Standard configuration of Sxhkd which i'll be chanign at some point 

# terminal emulator
super + Return
	alacritty

# program launcher
super + @space
	rofi -combi-modi window,drun,ssh -font "hack 10" -show combi -show-icons

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

#
# bspwm hotkeys
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}


# My personal settings 
super + shift + b
	firefox


# Volume rockers controls 

# In an window manager set-up, also the volume controls should be correctly handled. 
# While for making shortcuts with the classical letters is straightforward (look above), when dealing 
# with the volume controls we need to figure out what is an appropiate "letter" for these buttons.
#
# A Keyboard input is associated with several codes: 
# 1. We have the scancode which is directly communicated by the keyboard
# 2. The kernel takes that code and maps to a keycode 
# 3. The keycode is then associated to  keysym which is a symbolic reference to the key that has been pressed. This map depends on the keyboard layout you are using on your computer
#
# Finding the keycode of such volumes is necessary to find the associated keysym to be put in this file 
# in order to reproduce the correct behaviour on their keypress 
#
# With xev -event keyboard you can listen to the key events generated by X server, see the keycodes and
# then using xmodmap -pke you search for that code to see the associated keysym. 
# Xmodmap contains the mapping between the keycodes and their keysym, and you can customise it by 
# creating your own mapping in your home directory.
#
# In an easier way you can simply exec the following command (xev listens to all the events generated 
# by the x-server, hence also moving the mouse generates events): 
# xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
#
# The keys XF86AudioMute,XF86AudioRaiseVolume and XF86AudioLowerVolume are the keysyms associated to the 
# keys related to the volume controls 

# pactl is the command utility to interact with pulseaudio, and particularly we use set-sink-<action> to
# interact with the outputs of our computer, whereas set-source-<action> deals with the input audio devices
# (microphones)
#
# Since we want our control keys to adapt to the current sink (if we plug an headset we want to alter the 
# volume related to the sink's headset and not the computer's audio) we need to get the current sink which
# is active. 
# We can query pulse audio to get the current active sink by using the command pactl get-default-sink, 
# hence nesting bash queries using command $(command).
#
# A particular state which can be set useful especially when muting microphones/outputs is the toggle one
# which simply assigns the negation of the value which is currently assigned to that specific source/sink.

# Toggle mute
XF86AudioMute
    pactl set-sink-mute $(pactl get-default-sink) toggle

# Toggle mic mute
XF86AudioMicMute
    pactl set-source-mute $(pactl get-default-source) toggle

# Change volume, here the syntax is curious but straightforward
XF86Audio{Raise,Lower}Volume
    pactl set-sink-volume $(pactl get-default-sink) {+,-}5%

